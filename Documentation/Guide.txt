---------------
What is Vidola?
---------------

Vidola is a documentation markup language. It is designed to make end-user documentation 
as natural as possible. The reason for yet another markup language 
is that none of the others satisfied how I wanted to document. Eg DocBook has 
a lot of options but writing documentation for the web with it is unnatural. Markdown 
is more intuitive and natural but has limitations for creating multi-page documents.


-------------
Vidola syntax
-------------

Vidola is a library to transform documents into HTML. It also is a markup language 
to use for such documents. The markup follows mostly regular Markdown markup with
some extensions and some differences.


{table of contents}


Handling of special characters
==============================

As in the [[Markdown http://daringfireball.net/projects/markdown/syntax]] implementation
the ampersand (&), greater than sign (>) and lesser than sign (>) are automatically converted to
entities so you don't have to worry about that when you are writing. The ampersand is not replaced
when it is part of an entity (except in code blocks).

When you like to avoid that a character triggers a special meaning you can escape it with a backslash.

	This \*word\* won't be rendered as <em>word</em> but as *word*.


Raw HTML
========

Not everything is possible with the simple syntax rules Vidola uses. If you would need to
you can add raw HTML to the text. Everything is allow but you have to keep one rule in
mind: each pattern should still have the same form. Take a paragrap. It needs a blank line
before and after its text. That means that you can add HTML like this

	A short paragraph.

	<div>

	A paragraph withing manually added tags.

	</div>

	Note the blank lines.

But not like this:

	A short paragraph.

	<div>
	A paragraph withing manually added tags.
	</div>

	This won't work.

If the pattern is indented, as when you are writing a paragraph in a list item, the tags that
surround it should also be indented.

	* item a
	* Item b has an extra paragraph.
	
	  <div>

	  This paragraph is within div tags that need to be indented.

	  </div>


Headers
========

[[Atx http://www.aaronsw.com/2002/atx/intro]] style headers are headers preceded
by one or more dash signs. The number of them determines its level.

	## level 2 header

[[Setext http://docutils.sourceforge.net/mirror/setext.html]] style headers are
supported too but are made a bit more powerful. They are assigned a level in order
of appearance. The first used markup will be used as a level 1 header throughout
the document.

Allowed signs to mark headers are: -=+*^#. At least three such signs must be used and 
they can appear before or before and after the header text.

Some examples will make this clear:

	CODE:
		---
		a header
		---

		=_=_=_=
		another header
		*******

The first three signs are what counts. Eg the following two will have the same level:

	CODE:
		---***
		a header
		---***

		---+++
		same level header
		---+++


Paragraphs
==========

A paragraph is formed by text preceded and followed by a blank line.

	CODE:
		This is a paragraph. It is followed by a blank line.
		
		This is also a paragraph. It is preceded by a blank line. It is not followed by a 
		blank line because it is the end of the virtual file.

Indentation can be used to make the document more readable.


Code
====

Code is preceded by the word 'CODE:' with the actual code following on the second 
line. Both are indented. The code block must be indented in respect to the previous
lines. The actual code is indented after the 'code' word. The code block ends when
a blank line is encountered with text that is equally or less indented as the 'code' word.

	This is a regular paragraph with samples of code blocks:

		CODE:
		Note the 'CODE:' word. It is followed by the actual code.

		CODE:

			White space is possible.

		CODE: This is another possibility.

	This is the next paragraph.

The code block must be preceded and followed by a blank line. Note that the 'code' word is case
insensitive.

Another option is to write code between two lines of three tildes.

	~~~
	this is also treated as code
	~~~

Actually, what is after those three tildes doesn't matter, so you could just as well write:

	~~~ code ~~~

	this is also treated as code

	~~~~~~~~~~~~

This type of code doesn't need to be indented. When you need to write three tildes as code
you'll have to indent it though:

	~~~ code ~~~
		~~~
		meta code example
		~~~
	~~~~~~~~~~~~

Inline code is also possible with backticks:

	You could write ´$this->foo´ for example.


Note
====

Notes can be created as follows:

	CODE:
		!NOTE This is a note.

			This sentence is still
		part of the note.

		This sentence is outside the note.

The word 'note' is case insensitive. A note block is ended with a blank line
followed by text equally or less indented.


blockquote
==========

Blockquote are quoted text preceded by ´>´.

	> this is a blockquote
	> continues on the next line

Lazy quoting is also possible.

	> this is a blockquote
	continues on the next line

Blockquotes can contain other markup.

	> this is a blockquote
	>
	> > within a blockquote
	> > another blockquote
	>
	> notice the blank lines


Lists
=====

For unordered lists you can use *, + or -.

	+ an item
	+ other item

For ordered lists use a number followed by a dot.

	1. First item
	2. Second item

The actual numbers used do not influence order. Instead of numbers you can also
use the hash sign followed by a dot (inspired by [[Pandoc http://johnmacfarlane.net/pandoc/README.html#ordered-lists]].

	#. First item
	#. Second item

A list needs a blank line before and after it. Nested lists are possible if you
follow this rule.

	* item
	* item with a sublist

	    * item in sublist
	    * other item in sublist

	* item in main list

This is a difference with Markdown which requires only a blank line in the first
level of the list.

Horizontal rules
================

Three or more hyphens, underscores or asterisks on its own line. Spacing is allowed
but take not that if you start the line with four or more spaces it will become code.

	* * *
	---
	 _ __

All three will produce a horizontal rule.


Links
=====

An url between double square brackets is automatically converted to a hyperlink. Thus

	[[http://www.mysite.com]]

becomes

	<a href="http://www.mysite.com">http://www.mysite.com</a>

Optionally a title attribute can be specified:

	[[http://example.com "title"]]

Also optionally anchor text is written before the link:

	This is a [[link http://example.com]] in text.

Standard [Markdown link syntax][1] is also available.

	(anchor text)[url "title text"]

A link reference can be used to place the actual url somewhere else in your text. Note that
single brackets are used. The link definition can contain the title attribute:

	This is a [link] [1] in text.

	The link definition can be placed somewhere else on its own line, 
	optionally indented one to three spaces.

	[1]: http://example.com "title"

 [1]: http://daringfireball.net/projects/markdown/syntax#link


Images
======

The syntax for images follows the [[Markdown implementation http://daringfireball.net/projects/markdown/syntax#link]].
The two styles are inline and reference.

Inline images are written as follows:

	![alternate text](link/to/image "optional title")

The title can be between single and double quotes.

Reference style images have the following syntax:

	![alternate text][link id]

The link id syntax is the same as with regular links. You can place the link
definition anywhere in the text.

	[link id]: link/to/image "optional title"


Email
=====

An automatic email link is created by placing the email address between a lesser than
and greater than sign.

	Mail me at my <mail@example.com>.

The regular link syntax allows to create an email link with anchor text.

	This is [my email](mailto:mail@example.com).

Italic, emphasized and important text
==================================

Words can be italicized by wrapping them between underscores. Underscores 
in words are left as is. Underscores that span more than one word are allowed.

	A couple of _italicized words_.

Emphasized text is placed between asterisks:

	Emphasized text is placed *between* asterisks.

Important text is achieved by putting words between double asterisks:

	A sentence with **important** text.

!Note: Importance is chosen instead of strong importance to reflect the change coming with HTML5. See
the [[section on changed elements http://www.w3.org/TR/html5-diff/#changed-elements]].


Newlines
========

Newlines can be inserted by adding a double space at the end of the line. This
follows Markdown convention. Writing documentation is a different context from
writing forum o blog posts. I think there are less cases in documentation where
having a hard line break would be beneficial. More technically oriented users
will also have less problem adoption this, although admittedly it is
counterintuitive.

I've considered adopting the [[suggestion http://michelf.com/weblog/2009/markdown-sustainability/]]
here in the comments of allowing hard line breaks in top-level paragraphs. But
it adds complexity.

Readability should be the prime goal and I believe that for writing documentation
using two spaces has the most benefits in that regard.


Table of contents
=================

You can create a table of contents and have it filled automatically with
the headers that follow. It takes all headers and displays a nested list
stopping at the end of the document or when it encounters a header at a
higher level of the first one encounterd. Optionally you can specify the
depth.

		{table of contents}
			depth: 2

			about
			introduction

		a header
		========

		A paragraph.

The example above creates a table of contents if the current document, the about document
and the introduction document with all top-level headers found and their immediate
subheaders.


Definition lists
================

A term followed by description followed by a colon. Multiple terms can share the same description. A term can
have multiple descriptions if they are separated by a tilde. Here's an example:

	CODE:
		term a:
		term b:
			~explanation of term a and b
			it continues on the next line

			it contains more than one paragraph

			~alternative explanation


-----------
Library use
-----------

command line use
================

Run Vidola with `php RunVidola.php`. The following options are present:

--template
	Path to a template file. If not specified the default template is used.

	Example: --template=/home/Koen/Vidola/Templates/Default.php

--source
	Source file to convert.

	Example: --source=/home/Koen/MyProject/Docs/Index.txt

--target.dir:
	The directory where the documentation files should be placed.

	Example: --source=/home/Koen/MyProject/Docs/HTML/