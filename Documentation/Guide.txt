---------------
What is Vidola?
---------------

Vidola is a documentation markup language. It is designed to make end-user documentation 
as natural as possible. The reason for yet another markup language 
is that none of the others satisfied how I wanted to document. Eg DocBook has 
a lot of options but writing documentation for the web with it is unnatural. Markdown 
is more intuitive and natural but has limitations for creating multi-page documents. 
Vidola does draw a lot of inspiration from both Markdown and reStructuredText.


-------------
Vidola syntax
-------------

Vidola is a library to transform documents into HTML. It also defines a markup language 
to use for such documents. Here I describe the markup.

Handling of special characters
==============================

As in the [[Markdown http://daringfireball.net/projects/markdown/syntax]] implementation
the ampersand (&), greater than sign (>) and lesser than sign (>) are automatically converted to
entities so you don't have to worry about that when you are writing. The ampersand is not replaced
when it is part of an entity (except in code blocks).

Raw HTML
========

Not everything is possible with the simple syntax rules Vidola uses. If you would need to
you can add raw HTML to the text. Everything is allow but you have to keep one rule in
mind: each pattern should still have the same form. Take a paragrap. It needs a blank line
before and after its text. That means that you can add HTML like this

	A short paragraph.

	<div>

	A paragraph withing manually added tags.

	</div>

	Note the blank lines.

But not like this:

	A short paragraph.

	<div>
	A paragraph withing manually added tags.
	</div>

	This won't work.

If the pattern is indented, as when you are writing a paragraph in a list item, the tags that
surround it should also be indented.

	* item a
	* Item b has an extra paragraph.
	
	  <div>

	  This paragraph is within div tags that need to be indented.

	  </div>


Headings
========

For all headings the following applies:

	* It is preceded by a blank line
	* Unless it is the start of the document
	* They can be indented to improve readability
	* They Are followed by a blank line

Headers are assigned a level in order of appearance. The first used markup will be 
used as a level 1 header throughout the document.

Allowed signs to mark headers are: -=+*^#. At least three such signs must be used and 
they can appear before or before and after the header text.

Examples of a valid header:

	CODE:
		---
		a header
		---

		=_=_=_=
		another header
		*******

The first three signs are what counts. Eg the following two will have the same level:

	CODE:
		---***
		a header
		---***

		---+++
		same level header
		---+++


Paragraphs
==========

A paragraph is formed by text preceded and followed by a blank line.

	CODE:
		This is a paragraph. It is followed by a blank line.
		
		This is also a paragraph. It is preceded by a blank line. It is not followed by a 
		blank line because it is the end of the virtual file.

Indentation can be used to make the document more readable.


Code
====

Code is preceded by the word 'CODE:' with the actual code following on the second 
line. Both are indented. The code block must be indented in respect to the previous
lines. The actual code is indented after the 'code' word. The code block ends when
a blank line is encountered with text that is equally or less indented as the 'code' word.

	CODE:
		This is a regular paragraph with samples of code blocks:
	
			CODE:
			Note the 'CODE:' word. It is followed by the actual code.

			CODE:

				White space is possible.

			CODE: This is another possibility.
	
		This is the next paragraph.

The code block must be preceded and followed by a blank line. Note that the 'code' word is case
insensitive.

Another option is to write code between two lines of three tildes.

	code:
		~~~
		this is also treated as code
		~~~

Actually, what is after those three tildes doesn't matter, so you could just as well write:

	code:
		~~~ code ~~~

		this is also treated as code

		~~~~~~~~~~~~

This type of code doesn't need to be indented. When you need to write three tildes as code
you'll have to indent it though:

	code:
		~~~ code ~~~
			~~~
			meta code example
			~~~
		~~~~~~~~~~~~


Note
====

Notes can be created as follows:

	CODE:
		!NOTE This is a note.

			This sentence is still
		part of the note.

		This sentence is outside the note.

The word 'note' is case insensitive. A note block is ended with a blank line
followed by text equally or less indented.


Links
=====

An url between double square brackets is automatically converted to a hyperlink. Thus

	CODE:
		[[http://www.mysite.com]]

becomes

	CODE:
		<a href="http://www.mysite.com">http://www.mysite.com</a>

Optionally a title attribute can be specified:

	CODE:
		[[http://example.com "title"]]

Optionally anchor text is written before the link:

	CODE:
		This is a [[link http://example.com]] in text.

A link reference is used to place the actual url somewhere else in your text. Note that
single brackets are used. The link definition can contain the title attribute:

	CODE:
		This is a [link] [1] in text.

		The link definition can be placed somewhere else on its own line, 
		optionally indented.

			[1]: http://example.com "title"

Inline code is also possible with backticks:

	CODE:
		You could write ´$this->foo´ for example.


Email
=====

An email link is created by placing the email adress in square brackets. The anchor text
precedes this and is also placed within square brackets, but is optional. If it is not
there, the address itself will be used.

	CODE:
		Mail me at my [email address][mail@example.com].

Italic and bold text
====================

Words can be italicized by wrapping them between underscores. Underscores 
in words are left as is. Underscores that span more than one word are allowed.

	CODE:
		A couple of _italicized words_.

Bold text is placed between asterisks:

	CODE:
		Bold text is placed *between* asterisks.


Newlines
========

Linebreaks are return based (new lines). 


Table of contents
=================

You can create a table of contents and have it filled automatically with
the headers that follow. It takes all headers and displays a nested list
stopping at the end of the document or when it encounters a header at a
higher level of the first one encounterd. Optionally you can specify the
depth.

	CODE:
		table of contents:
			depth: 2

		a header
		========

		etc


Definition lists
================

A term followed by description followed by a colon. Multiple terms can share the same description. A term can
have multiple descriptions if they are separated by a tilde. Here's an example:

	CODE:
		term a:
		term b:
			~explanation of term a and b
			it continues on the next line

			it contains more than one paragraph

			~alternative explanation


-----------
Library use
-----------

command line use
================


The following options are present:

template:
	Path to a template file. If not specified the default template is used.

source:
	Source file to convert.

target.dir:
	The directory where the documentation files should be placed.